graph LR
  accTitle: "Regex: /^((?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))(Z|[\\+-]\\d{2}:\\d{2})?)$/gm"
  accDescr: "Generated with regex-to-mermaid@1.0.3"

  %% Nodes
  start@{ shape: f-circ };
  fin@{ shape: f-circ };
  assertion_1("^<br><i><small>Begins with</small></i>"):::assertion;
  literal_1("Any digit<br><i><small>Exactly 4</small></i>"):::literal;
  literal_2("-"):::literal;
  literal_3("Any digit<br><i><small>Exactly 2</small></i>"):::literal;
  literal_4("-"):::literal;
  literal_5("Any digit<br><i><small>Exactly 2</small></i>"):::literal;
  literal_6("T"):::literal;
  literal_7("Any digit<br><i><small>Exactly 2</small></i>"):::literal;
  literal_8(":"):::literal;
  literal_9("Any digit<br><i><small>Exactly 2</small></i>"):::literal;
  literal_10(":"):::literal;
  literal_11("Any digit<br><i><small>Exactly 2</small></i>"):::literal;
  literal_12("Any character"):::literal;
  literal_13("Any digit<br><i><small>One or more</small></i>"):::literal;
  disjunction_begin_1:::disjunction@{ shape: f-circ };
  disjunction_end_1:::disjunction@{ shape: f-circ };
  literal_14("Z"):::literal;
  char_class_1("+ -"):::char-class;
  literal_15("Any digit<br><i><small>Exactly 2</small></i>"):::literal;
  literal_16(":"):::literal;
  literal_17("Any digit<br><i><small>Exactly 2</small></i>"):::literal;
  assertion_2("$<br><i><small>Ends with</small></i>"):::assertion;

  %% Subgraphs
  subgraph standard_2 ["<small>#2</small> Group 2"]
    literal_1
    literal_2
    literal_3
    literal_4
    literal_5
  end

  subgraph non_capturing_2 ["Non-capturing <small><i>Optional</i></small>"]
    literal_12
    literal_13
  end

  subgraph standard_3 ["<small>#3</small> Group 3"]
    non_capturing_2
    literal_7
    literal_8
    literal_9
    literal_10
    literal_11
  end

  subgraph non_capturing_1 ["Non-capturing"]
    standard_2
    non_capturing_2
    standard_3
    literal_6
  end

  subgraph standard_4 ["<small>#4</small> Group 4 <small><i>Optional</i></small>"]
    disjunction_begin_1
    disjunction_end_1
    literal_14
    char_class_1
    literal_15
    literal_16
    literal_17
  end

  subgraph standard_1 ["<small>#1</small> Group 1"]
    standard_2
    non_capturing_2
    standard_3
    non_capturing_1
    standard_4
  end

  %% Edges
  start --- assertion_1;
  assertion_1 --- literal_1;
  literal_1 --- literal_2;
  literal_2 --- literal_3;
  literal_3 --- literal_4;
  literal_4 --- literal_5;
  literal_5 --- literal_6;
  literal_6 --- literal_7;
  literal_7 --- literal_8;
  literal_8 --- literal_9;
  literal_9 --- literal_10;
  literal_10 --- literal_11;
  literal_11 --- literal_12;
  literal_12 --- literal_13;
  literal_13 --- disjunction_begin_1;
  disjunction_begin_1 --- literal_14;
  literal_14 --- disjunction_end_1;
  disjunction_begin_1 --- char_class_1;
  char_class_1 --- literal_15;
  literal_15 --- literal_16;
  literal_16 --- literal_17;
  literal_17 --- disjunction_end_1;
  disjunction_end_1 --- assertion_2;
  assertion_2 --- fin;

  %% Styles
  %% Node Styling
  classDef assertion fill:#B6D7A8,stroke:#93C47D,color:#000000;
  classDef literal fill:#F9CB9C,stroke:#E69138,color:#000000;
  classDef disjunction fill:#FFD966,stroke:#F1C232,color:#000000;
  classDef char-class fill:#B4A7D6,stroke:#8E7CC3,color:#000000;

  %% Group Styling
  classDef standard fill:#FFF2CC,stroke:#F1C232,color:#000000;
  classDef non-capturing fill:#CFE2F3,stroke:#6D9EEB,color:#000000;

  %% Apply Group Classes
  class standard_2,standard_3,standard_4,standard_1 standard;
  class non_capturing_2,non_capturing_1 non-capturing;