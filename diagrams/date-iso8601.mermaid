graph LR
  accTitle: "Regex: ^(19|20)\\d\\d([- /.])(0[1-9]|1[012])\\2(0[1-9]|[12][0-9]|3[01])$"
  accDescr: "Generated with regex-to-mermaid@1.0.3"

  %% Nodes
  start@{ shape: f-circ };
  fin@{ shape: f-circ };
  assertion_1("^<br><i><small>Begins with</small></i>"):::assertion;
  disjunction_begin_1:::disjunction@{ shape: f-circ };
  disjunction_end_1:::disjunction@{ shape: f-circ };
  literal_1("19"):::literal;
  literal_2("20"):::literal;
  literal_3("\d\d"):::literal;
  char_class_1("- Space / ."):::char-class;
  disjunction_begin_2:::disjunction@{ shape: f-circ };
  disjunction_end_2:::disjunction@{ shape: f-circ };
  literal_4("0"):::literal;
  char_class_2("1-9"):::char-class;
  literal_5("1"):::literal;
  char_class_3("0 1 2"):::char-class;
  back_reference_1("\2<br><i><small>Back-reference</small></i>"):::back-reference;
  disjunction_begin_3:::disjunction@{ shape: f-circ };
  disjunction_end_3:::disjunction@{ shape: f-circ };
  literal_6("0"):::literal;
  char_class_4("1-9"):::char-class;
  char_class_5("1 2"):::char-class;
  char_class_6("Any digit"):::char-class;
  literal_7("3"):::literal;
  char_class_7("0 1"):::char-class;
  assertion_2("$<br><i><small>Ends with</small></i>"):::assertion;

  %% Subgraphs
  subgraph standard_1 ["<small>#1</small> Group 1"]
    disjunction_begin_1
    disjunction_end_1
    literal_1
    literal_2
  end

  subgraph standard_2 ["<small>#2</small> Group 2"]
    char_class_1
  end

  subgraph standard_3 ["<small>#3</small> Group 3"]
    disjunction_begin_2
    disjunction_end_2
    literal_4
    char_class_2
    literal_5
    char_class_3
  end

  subgraph standard_4 ["<small>#4</small> Group 4"]
    disjunction_begin_3
    disjunction_end_3
    literal_6
    char_class_4
    char_class_5
    char_class_6
    literal_7
    char_class_7
  end

  %% Edges
  start --- assertion_1;
  assertion_1 --- disjunction_begin_1;
  disjunction_begin_1 --- literal_1;
  literal_1 --- disjunction_end_1;
  disjunction_begin_1 --- literal_2;
  literal_2 --- disjunction_end_1;
  disjunction_end_1 --- literal_3;
  literal_3 --- char_class_1;
  char_class_1 --- disjunction_begin_2;
  disjunction_begin_2 --- literal_4;
  literal_4 --- char_class_2;
  char_class_2 --- disjunction_end_2;
  disjunction_begin_2 --- literal_5;
  literal_5 --- char_class_3;
  char_class_3 --- disjunction_end_2;
  disjunction_end_2 --- back_reference_1;
  back_reference_1 --- disjunction_begin_3;
  disjunction_begin_3 --- literal_6;
  literal_6 --- char_class_4;
  char_class_4 --- disjunction_end_3;
  disjunction_begin_3 --- char_class_5;
  char_class_5 --- char_class_6;
  char_class_6 --- disjunction_end_3;
  disjunction_begin_3 --- literal_7;
  literal_7 --- char_class_7;
  char_class_7 --- disjunction_end_3;
  disjunction_end_3 --- assertion_2;
  assertion_2 --- fin;

  %% Styles
  %% Node Styling
  classDef assertion fill:#B6D7A8,stroke:#93C47D,color:#000000;
  classDef disjunction fill:#FFD966,stroke:#F1C232,color:#000000;
  classDef literal fill:#F9CB9C,stroke:#E69138,color:#000000;
  classDef char-class fill:#B4A7D6,stroke:#8E7CC3,color:#000000;
  classDef back-reference fill:#F4CCCC,stroke:#E06666,color:#000000;

  %% Group Styling
  classDef standard fill:#FFF2CC,stroke:#F1C232,color:#000000;

  %% Apply Group Classes
  class standard_1,standard_2,standard_3,standard_4 standard;